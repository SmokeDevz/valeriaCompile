{"version":3,"sources":["webpack:///src/app/pages/card-add/card-add.module.ts","webpack:///src/app/pages/card-add/card-add.html","webpack:///src/app/pages/card-add/card-add.ts"],"names":["CardAddPageModule","declarations","imports","entryComponents","CardAddPage","injector","stripeService","creditCardService","isSaving","cardOptions","hidePostalCode","elementsOptions","setupForm","setupStripeCard","locale","preference","lang","form","name","required","card","modalCtrl","dismiss","invalid","translate","get","subscribe","str","showToast","formData","Object","assign","value","createToken","getCard","toPromise","token","error","message","create","stripeToken","id","onDismiss","errorMessage","code","onSubmit","selector","templateUrl","styleUrls"],"mappings":"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","file":"default~pages-card-list-card-list-module~pages-checkout-page-checkout-page-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CardAddPage } from './card-add';\nimport { SharedModule } from '../../shared.module';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgxStripeModule } from \"@nomadreservations/ngx-stripe\";\n\n@NgModule({\n  declarations: [\n    CardAddPage,\n  ],\n  imports: [\n    SharedModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgxStripeModule,\n  ],\n  entryComponents: [\n    CardAddPage\n  ]\n})\nexport class CardAddPageModule {}\n","<ion-header class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-button fill=\"clear\" (click)=\"onDismiss()\">\n        <ion-icon name=\"close\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-padding\">\n\n  <div class=\"ion-margin-bottom\">\n    <ion-text color=\"dark\">\n      <h4 class=\"bold ion-no-margin\">\n        {{ 'BILLING_INFO' | translate }}\n      </h4>\n      <div class=\"line\"></div>\n    </ion-text>\n  </div>\n\n  <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" #form1=\"ngForm\" novalidate>\n\n    <ngx-stripe-card [options]=\"cardOptions\" [elementsOptions]=\"elementsOptions\">\n    </ngx-stripe-card>\n\n    <ion-list lines=\"none\">\n\n      <ion-row>\n        <ion-col size=\"12\">\n          <ion-label position=\"stacked\" color=\"medium\">\n            <span class=\"bold\">{{ 'CARDHOLDER_NAME' | translate }}</span>\n          </ion-label>\n          <ion-item color=\"light\" lines=\"none\">\n            <ion-input type=\"text\" formControlName=\"name\"></ion-input>\n          </ion-item>\n        </ion-col>\n      </ion-row>\n\n      <div class=\"ion-text-center\">\n        <ion-button type=\"submit\" shape=\"round\" color=\"primary\" [disabled]=\"isSaving\" strong>\n          <ion-spinner color=\"light\" *ngIf=\"isSaving\"></ion-spinner>\n          <span *ngIf=\"!isSaving\">{{ 'SAVE' | translate }}</span>\n        </ion-button>\n      </div>\n\n    </ion-list>\n\n  </form>\n\n</ion-content>","import { Component, Injector, ViewChild, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Card } from '../../services/card';\nimport { BasePage } from '../base-page/base-page';\nimport { StripeService, StripeCardComponent, ElementOptions, ElementsOptions } from '@nomadreservations/ngx-stripe';\n\n@Component({\n  selector: 'page-card-add',\n  templateUrl: 'card-add.html',\n  styleUrls: ['card-add.scss']\n})\nexport class CardAddPage extends BasePage implements OnInit {\n\n  @ViewChild(StripeCardComponent) card: StripeCardComponent;\n\n  public form: FormGroup;\n  public isSaving: boolean = false;\n  public cardOptions: ElementOptions = {\n    hidePostalCode: true\n  };\n  public elementsOptions: ElementsOptions = {};\n\n  constructor(injector: Injector,\n    private stripeService: StripeService,\n    private creditCardService: Card) {\n    super(injector);\n  }\n\n  ngOnInit() {\n    this.setupForm();\n    this.setupStripeCard();\n  }\n\n  enableMenuSwipe() {\n    return false;\n  }\n\n  setupStripeCard() {\n    this.elementsOptions.locale = this.preference.lang;\n  }\n\n  setupForm() {\n    this.form = new FormGroup({\n      name: new FormControl('', Validators.required)\n    });\n  }\n\n  onDismiss(card: Card = null) {\n    this.modalCtrl.dismiss(card);\n  }\n\n  async onSubmit() {\n\n    if (this.form.invalid) {\n      return this.translate.get('INVALID_FORM').subscribe(str => this.showToast(str));\n    }\n\n    try {\n\n      this.isSaving = true;\n\n      const formData = Object.assign({}, this.form.value);\n\n      const { token, error } = await this.stripeService\n        .createToken(this.card.getCard(), formData)\n        .toPromise();\n\n      if (error) {\n        this.isSaving = false;\n        return this.showToast(error.message);\n      }\n\n      const card = await this.creditCardService.create({\n        stripeToken: token.id\n      });\n\n      this.isSaving = false;\n\n      this.onDismiss(card);\n\n    } catch (error) {\n\n      let errorMessage = 'ERROR_NETWORK';\n\n      if (typeof error === 'string' || error.code === 1002) {\n        errorMessage = 'CARD_INVALID';\n      }\n\n      this.isSaving = false;\n      this.translate.get(errorMessage).subscribe(str => this.showToast(str));\n    }\n\n  }\n\n}"]}