{"version":3,"sources":["webpack:///src/app/pages/address-list/address-list.module.ts","webpack:///src/app/pages/address-list/address-list.html","webpack:///src/app/pages/address-list/address-list.ts"],"names":["AddressListPageModule","forChild","path","component","declarations","imports","AddressListPage","injector","customerAddressService","addresses","length","showLoadingView","showOverlay","loadData","getTrans","title","setPageTitle","setMetaTags","event","refresher","target","load","showContentView","showEmptyView","onRefreshComplete","showErrorView","translate","get","subscribe","str","showToast","address","toPromise","showConfirm","res","destroy","index","indexOf","splice","modalCtrl","create","modal","present","onWillDismiss","data","unshift","onAddButtonTouched","selector","templateUrl","styleUrls"],"mappings":"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","file":"pages-address-list-address-list-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AddressListPage } from './address-list';\nimport { SharedModule } from '../../shared.module';\nimport { AddressAddPageModule } from '../address-add/address-add.module';\n\n@NgModule({\n  declarations: [\n    AddressListPage,\n  ],\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: AddressListPage\n      }\n    ]),\n    SharedModule,\n    AddressAddPageModule\n  ],\n})\nexport class AddressListPageModule {}\n","<ion-header class=\"ion-no-border\">\n\n  <ion-toolbar fixed>\n      <ion-buttons slot=\"start\">\n          <ion-back-button text=\"\"></ion-back-button>\n      </ion-buttons>\n\n\n\n      <div class=\"show-sm-up\" style=\"display: flex; flex-direction: column;  padding-bottom: 8px;\">\n          <div class=\"logo\" style=\"display: flex;\">\n\n              <h4>DIRECCIONES</h4>\n          </div>\n      </div>\n      <ion-buttons slot=\"end\">\n        <ion-button (click)=\"onAddButtonTouched()\">\n          <ion-icon name=\"add\" slot=\"icon-only\"></ion-icon>\n        </ion-button>\n      </ion-buttons>\n  </ion-toolbar>\n\n</ion-header>\n\n\n\n<ion-content>\n\n  <ion-refresher slot=\"fixed\" (ionRefresh)=\"loadData($event)\">\n    <ion-refresher-content pullingText=\"Desliza para actualizar\" refreshingText=\"Actualizando\">\n    </ion-refresher-content>\n  </ion-refresher>\n\n  <ion-grid fixed>\n\n    <empty-view *ngIf=\"isErrorViewVisible\" icon=\"alert-circle-outline\" [text]=\"'ERROR DE CONEXION'\">\n    </empty-view>\n\n    <empty-view *ngIf=\"isEmptyViewVisible\" image=\"./assets/imgs/undraw_address_udes.svg\" imageWidth=\"200\"\n      [text]=\"'NO SE HA REGISTRADO NINGUNA DIRECCION'\">\n    </empty-view>\n\n    <ion-row class=\"ion-justify-content-center\" *ngIf=\"isContentViewVisible\">\n      <ion-col size-xs=\"12\" size-lg=\"9\">\n        <ion-list lines=\"none\" class=\"ion-margin-top\">\n          <ion-item class=\"radius ion-text-wrap ion-margin-bottom\" color=\"light\" *ngFor=\"let address of addresses\">\n            <ion-icon name=\"pin\" color=\"primary\" slot=\"start\"></ion-icon>\n            <ion-label style=\"width: 100%;\">\n              <h2 class=\"bold\">{{ address.name }}</h2>\n              <p><span style=\"font-weight: bold;\">Direcci√≥n :</span> {{ address.address }}</p>\n              <p><span style=\"font-weight: bold;\"> Telefono:</span> {{ address.phone }}</p>\n            </ion-label>\n            <ion-button fill=\"clear\" color=\"dark\" slot=\"end\" (click)=\"onDeleteAddress(address)\">\n              ELIMINAR</ion-button>\n          </ion-item>\n        </ion-list>\n      </ion-col>\n    </ion-row>\n\n    <ion-row class=\"ion-margin-vertical ion-justify-content-center\" *ngIf=\"isLoadingViewVisible\">\n      <ion-col size-xs=\"12\" size-lg=\"9\">\n        <ngx-skeleton-loader count=\"12\" [theme]=\"{ 'border-radius': '0', height: '60px' }\">\n        </ngx-skeleton-loader>\n      </ion-col>\n    </ion-row>\n\n  </ion-grid>\n\n</ion-content>","import { Component, Injector } from '@angular/core';\nimport { BasePage } from '../base-page/base-page';\nimport { CustomerAddress } from '../../services/customer-address';\nimport { AddressAddPage } from '../address-add/address-add';\n\n@Component({\n  selector: 'page-address-list',\n  templateUrl: 'address-list.html',\n  styleUrls: ['address-list.scss']\n})\nexport class AddressListPage extends BasePage {\n\n  public addresses: CustomerAddress[] = [];\n\n  constructor(injector: Injector,\n    private customerAddressService: CustomerAddress) {\n    super(injector);\n  }\n\n  enableMenuSwipe() {\n    return false;\n  }\n\n  async ionViewDidEnter() {\n\n    if (!this.addresses.length) {\n      this.showLoadingView({ showOverlay: false });\n      this.loadData();\n    }\n\n    const title = await this.getTrans('ADDRESSES');\n    this.setPageTitle(title);\n\n    this.setMetaTags({\n      title: title\n    });\n    \n  }\n\n  async loadData(event: any = {}) {\n\n    try {\n\n      this.refresher = event.target;\n  \n      this.addresses = await this.customerAddressService.load();\n      \n      if (this.addresses.length) {\n        this.showContentView();\n      } else {\n        this.showEmptyView();\n      }\n\n      this.onRefreshComplete();\n      \n    } catch (error) {\n      this.showErrorView();\n      this.onRefreshComplete();\n      this.translate.get('ERROR_NETWORK').subscribe((str) => this.showToast(str));\n    }\n  }\n\n  async onDeleteAddress(address: CustomerAddress) {\n\n    try {\n\n      const str = await this.translate.get('DELETE_CONFIRMATION').toPromise();\n\n      const res = await this.showConfirm(str);\n\n      if (!res) return;\n  \n      await this.showLoadingView({ showOverlay: false });\n  \n      await address.destroy();\n  \n      let index = this.addresses.indexOf(address);\n      if (index !== -1) this.addresses.splice(index, 1);\n\n      if (this.addresses.length) {\n        this.showContentView();\n      } else {\n        this.showEmptyView();\n      }\n      \n      this.translate.get('DELETED').subscribe(str => this.showToast(\"Direccion eliminada\"));\n      \n    } catch (error) {\n      this.showContentView();\n      this.translate.get('ERROR_NETWORK').subscribe(str => this.showToast(str));\n    }\n\n  }\n\n  async onAddButtonTouched() {\n\n    await this.showLoadingView({ showOverlay: true });\n    \n    const modal = await this.modalCtrl.create({\n      component: AddressAddPage\n    });\n    \n    await modal.present();\n\n    this.showContentView();\n\n    const { data } = await modal.onWillDismiss();\n    \n    if (data) {\n      this.addresses.unshift(data);\n      this.showContentView();\n    }\n  }\n\n}\n"]}